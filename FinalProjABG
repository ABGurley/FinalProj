"""
Created on Tue May 10 15:59:33 2022

@author: Ameri Gurley

Final Project

City wants to acquire an existing land with 10 wells 
Aquifer has hudraulic conductivity, K = 350 ft/day  (Range 200-700)
Storage coefficient = 0.001 (Range 0.0009-0.0025)
Well life is 30 years

- Drawdown <= 75% well depth by end of life
- Outer edge at a minimum, 4 monitoring wells
- 4 backup wells
- population 30,000-40,000
- mean use per capita 100 gpcd +- 15 gcpd
- meet with 95% efficiency
- 4 production wells with 6 backup wells  
- no more than 6 production wells

Estimate annual cost
"""

from pulp import *
import numpy as np
import os
import pandas as pd
import matplotlib.pyplot as plt
from scipy.integrate import quad
from scipy.optimize import minimize

# set working directory
dir = "C:/Users/astuckle/Dropbox (Personal)/CE 5331 - Optimization/FinalProj" #work
#dir = "C:/Users/18067/Dropbox (Personal)/CE 5331 - Optimization/MiniProj_03"
os.chdir(dir)

# Upload well data
a = pd.read_csv("Well_Data.csv")
a.columns

# Plot well locations 
Xwell = a.x_Feet
Ywell = a.y_Feet
wellID = a.Well_ID

plt.plot(Xwell, Ywell, "bo")
plt.xlabel("Well Location x (ft)")
plt.ylabel("Well Location y (ft)")
plt.grid()
plt.title("Well Location Plot")
for i, txt in enumerate(wellID):
    plt.annotate(txt, (Xwell[i], Ywell[i]))
plt.show()

# Some constants?
K = 350 #ft/day  (200-700)
S = 0.001 #(0.0009-0.0025)
Dj = a.Depth_FT*.25 # to limit well depth to 75% just make that the allowable depth?
# Option 2: Dj = 150 which is 75% the shallowest well
rj = a.Radius_in/12 # put radius into feet
# t = time since pumping started... in days? K in ft/day
Q = 3000000/7.48 # gpd converted to ft^3/day
t = 366 # one year #10980 for 30 years of leap year days

# Define Theis Well function
def W_funk(u):
    W = -0.5772 - np.log(u) + u  
    return(W)

# Define drawdown function
def drawdown(Q, K, D, W):
    dd = (Q/(4*(np.pi)*K*Dj))*W
    return (dd)

# Define u function
def u_funk (r, S, K, t):
    u = r**2 * S / (4*K*r*t)
    return (u)

W = W_funk(u_funk(rj, S, K, t))

# Minimize the objective function for flow?
x0 = 1
obj = minimize(drawdown,x0,args=(K,Dj,W),method='Nelder-Mead')
