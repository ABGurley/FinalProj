# -*- coding: utf-8 -*-
"""
Created on Wed Feb 16 18:32:24 2022

Lecture whatever we're on now.

@author: 18067
"""

# Fitting Greenshields Model
# v = vf - (vf/kj) * k (y = ax + b)

# Fit using Ordinary Least Squares

# Import Libraries

import pandas as pd
import numpy as np
from scipy.optimize import minimize
import os


# Traffic Density - Linear Regression ===========================
# a = coeffients
def SSE(b, X, Y):
    Ypred = b[0] + b[1]*X
    err = (Y - Ypred)
    ssex = np.sum(err**2)
    return(ssex)

# find data
path = "C:/Users/astuckle/Dropbox (Personal)/CE 5331 - Optimization"
os.chdir(path)
    
# read data
a = pd.read_csv("ruraldensityspeed.csv")  
X = a["Density"]
Y = a["Speed"]

# minimimize the objective function
b = [1,1]
obj = minimize(SSE, b, args = (X, Y), method = "Nelder-Mead")
print(obj)

# compute free speed and jam density
vf = obj.x[0]
kj = abs(vf/obj.x[1])
print("No obstruction if traveling at", vf, "mph")
print("Traffic will come to a stop at", kj, "vehicles")


# Texas Earthquakes ============================
# Fitting a Poisson Model to TX Earthquake Data

# find data
path = "C:/Users/astuckle/Dropbox (Personal)/CE 5331 - Optimization"  # home
os.chdir(path)
    
# read data
a = pd.read_csv("TXEarthquakects.csv")  

# define the function to optimize
def txeqpois(lambdax, X):
    num1 = np.sum(X)
    num2 = len(X)
    LL = np.log(lambdax) * num1 - num2 * lambdax
    LL = -1 * LL # mult by -1 to return maximum
    return(LL)

# perform optimization
lambdax = 1
X = a["Count"]

LL = minimize(txeqpois, lambdax, args=(X,), method = "Nelder-Mead")
print(LL)    

XX = X[23:36] # just the count data
print(XX)

aa = a.iloc[23:36] # the year and count data
print(aa)

# run same procedure but with years 2009 through 2021
LL0921 = minimize(txeqpois, lambdax, args=(XX,), method = "Nelder-Mead")
print(LL0921) 
